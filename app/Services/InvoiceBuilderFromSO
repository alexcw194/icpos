<?php
$inv->lines()->create([
'sales_order_id' => $so->id,
'sales_order_line_id' => $L['sales_order_line_id'],
'item_id' => $L['item_id'],
'item_variant_id' => $L['item_variant_id'] ?? null,
'description' => $L['description'],
'unit' => $L['unit'] ?? 'pcs',
'qty' => $L['qty'],
'unit_price' => $L['unit_price'],
'discount_amount' => $L['discount_amount'] ?? 0,
'line_subtotal' => $lineSubtotal,
'line_total' => $lineTotal,
'snapshot_json' => $L['snapshot_json'] ?? null,
]);
$subtotal = bcadd($subtotal, $lineTotal, 2);
}


$taxAmount = round(((float)$subtotal) * ($inv->tax_percent/100), 2);
$inv->update([
'subtotal' => $subtotal,
'tax_amount'=> $taxAmount,
'total' => (float)$subtotal + $taxAmount,
]);


return $inv->fresh('lines');
});
}


/**
* Validate payload lines against SO remaining billable qty (no over-bill).
*/
protected function linesToBill(SalesOrder $so, array $payloadLines): array
{
$result = [];
$so->loadMissing(['lines']);


// Map current already invoiced qty per SO line
$billed = $this->mapAlreadyBilledQty($so);


foreach ($payloadLines as $pl) {
$soLine = $so->lines->firstWhere('id', $pl['sales_order_line_id']);
if (!$soLine) { throw new \InvalidArgumentException('Invalid sales_order_line_id.'); }


$ordered = (float)($soLine->qty ?? 0);
$already = (float)($billed[$soLine->id] ?? 0);
$remaining = max(0.0, $ordered - $already);
$want = (float)($pl['qty'] ?? 0);
if ($want <= 0) { continue; }
if ($want - $remaining > 1e-9) { throw new \RuntimeException('Over-billing detected on SO line #'.$soLine->id); }


$result[] = [
'sales_order_line_id' => $soLine->id,
'item_id' => $soLine->item_id,
'item_variant_id' => $soLine->item_variant_id ?? null,
'description' => trim(($soLine->name ?? 'Item').' '.($soLine->description ?? '')),
'unit' => $soLine->unit ?? 'pcs',
'qty' => $want,
'unit_price' => (float)($pl['unit_price'] ?? $soLine->unit_price ?? 0),
'discount_amount' => (float)($pl['discount_amount'] ?? 0),
'snapshot_json' => null,
];
}
if (empty($result)) {
throw new \RuntimeException('No invoice lines to create.');
}
return $result;
}


protected function mapAlreadyBilledQty(SalesOrder $so): array
{
// Sum qty from invoice_lines tied to this SO line
$rows = DB::table('invoice_lines')
->select('sales_order_line_id', DB::raw('SUM(qty) as qty'))
->where('sales_order_id', $so->id)
->groupBy('sales_order_line_id')
->pluck('qty','sales_order_line_id');
return $rows->toArray();
}
}